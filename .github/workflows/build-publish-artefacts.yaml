# TODO Readme on docker hub / ghcr.io
name: Build and Publish artefacts

on:
  push:
    branches:
      - main

jobs:
  generate-matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.set-matrix.outputs.images }}
      charts: ${{ steps.set-matrix.outputs.charts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse versions.yaml
        id: set-matrix
        run: |
          images=$(yq -o=json '[.[] | select(has("dockerContext"))]' versions.yaml -I 0)
          echo "images=$images" >> "$GITHUB_OUTPUT"
          charts=$(yq -o=json '[.[] | select(has("helmContext"))]' versions.yaml -I 0)
          echo "charts=$charts" >> "$GITHUB_OUTPUT"

  build-and-push-images:
    needs: generate-matrix
    runs-on: ubuntu-latest
    name: "Image: ${{ matrix.name }}"
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.images) }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: push
        with:
          context: ${{ matrix.dockerContext }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.name }}:${{ matrix.version }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.name }}:latest
            plmercereau/${{ matrix.name }}:${{ matrix.version }}
            plmercereau/${{ matrix.name }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.name }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true

  publish-charts:
    needs:
      - generate-matrix
      # TODO add the dependency again
      # - build-and-push-images
    runs-on: ubuntu-latest
    name: "Chart: ${{ matrix.name }}-chart"
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.charts) }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: test
        run: |
          echo "test"
          echo ${{ matrix.helmContext }}
      - name: get the latest version
        id: get_latest_version
        run: |
          API_URL=https://api.github.com/users/plmercereau/packages/container/${{ matrix.name }}-chart/versions
          VERSIONS=$(curl -s -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" $API_URL)
          VERSION=$(echo $VERSIONS | jq -j 'try .[] | select(.metadata.container.tags | index("${{ matrix.version }}")) | .metadata.container.tags | .[0] // ""')
          echo $VERSION
          echo "latest_version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Connect helm to the ghcr.io registry
        if: steps.get_latest_version.outputs.latest_version != matrix.version
        run: |
          helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      - name: replace the version in the helm chart
        if: steps.get_latest_version.outputs.latest_version != matrix.version
        run: |
          yq e '.version = "${{ matrix.version }}"' -i ${{ matrix.helmContext }}/Chart.yaml
          yq e '.appVersion = "${{ matrix.version }}"' -i ${{ matrix.helmContext }}/Chart.yaml
          # TODO commit the changes
          cat ${{ matrix.helmContext }}/Chart.yaml
      - name: push the helm chart to the ghcr.io registry
        if: steps.get_latest_version.outputs.latest_version != matrix.version
        run: |
          helm package ${{ matrix.helmContext }}
          helm push ${{ matrix.name }}-chart-${{ matrix.version }}.tgz oci://ghcr.io/plmercereau
